

# required substitution varibles :
# - FEELPP_TEMPLATE_CMAKE_PREFIX



macro(importDependenciesPackageConfigImpl _TARGET_LIBRARY _LIBRARY_PREFIX _CONFIG_INSTALL_DIR )
  set( _MANAGE_NAPP "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_NAPP@" )
  set( _USE_INTERNAL_NAPP "@FEELPP_USE_INTERNAL_NAPP@" )
  set( _MANAGE_FMT "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_FMT@" )
  set( _USE_INTERNAL_FMT "@FEELPP_USE_INTERNAL_FMT@" )
  set( _MANAGE_BOOST "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_BOOST@" )
  set( _USE_INTERNAL_BOOST "@FEELPP_USE_INTERNAL_BOOST@" )
  set( _MANAGE_CPR "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_CPR@" )
  set( _USE_INTERNAL_CPR "@FEELPP_USE_INTERNAL_CPR@" )
  set( _MANAGE_NLOHMANN_JSON "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_NLOHMANN_JSON@" )
  set( _USE_INTERNAL_NLOHMANN_JSON "@FEELPP_USE_INTERNAL_NLOHMANN_JSON@" )
  set( _MANAGE_SPDLOG "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_SPDLOG@" )
  set( _USE_INTERNAL_SPDLOG "@FEELPP_USE_INTERNAL_SPDLOG@" )
  set( _MANAGE_LIBASSERT "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_LIBASSERT@" )
  set( _USE_INTERNAL_LIBASSERT "@FEELPP_USE_INTERNAL_LIBASSERT@" )
  set( _MANAGE_EIGEN3 "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_EIGEN3@" )
  set( _USE_INTERNAL_EIGEN3 "@FEELPP_USE_INTERNAL_EIGEN3@" )
  set( _MANAGE_CGAL "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_CGAL@" )
  set( _USE_INTERNAL_CGAL "@FEELPP_USE_INTERNAL_CGAL@" )
  set( _MANAGE_BVH "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_BVH@" )
  set( _USE_INTERNAL_BVH "@FEELPP_USE_INTERNAL_BVH@" )
  set( _MANAGE_PNG "@@FEELPP_TEMPLATE_CMAKE_PREFIX@_MANAGE_PNG@" )
  set( _USE_INTERNAL_PNG "@FEELPP_USE_INTERNAL_PNG@" )

  if ( _MANAGE_NAPP )
    if ( _USE_INTERNAL_NAPP )
      find_dependency(napp PATHS ${_CONFIG_INSTALL_DIR}/../napp NO_DEFAULT_PATH )
    else()
      find_dependency(napp)
    endif()
  endif()

  if ( _MANAGE_FMT )
    if ( _USE_INTERNAL_FMT )
      find_dependency(fmt PATHS ${_CONFIG_INSTALL_DIR}/../fmt NO_DEFAULT_PATH )
    else()
      find_dependency(fmt)
    endif()
  endif()

  if ( _MANAGE_BOOST )
    set(BOOST_MIN_VERSION @BOOST_MIN_VERSION@)
    set(BOOST_COMPONENTS @BOOST_COMPONENTS@)
    find_dependency(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS ${BOOST_COMPONENTS})
  endif()

  if ( _MANAGE_NLOHMANN_JSON )
    if ( _USE_INTERNAL_NLOHMANN_JSON )
      find_dependency(nlohmann_json PATHS ${PACKAGE_PREFIX_DIR}/${CMAKE_INSTALL_DATADIR}/cmake/nlohmann_json NO_DEFAULT_PATH )
    else()
      find_dependency(nlohmann_json)
    endif()
  endif()

  if ( _MANAGE_SPDLOG )
    if ( _USE_INTERNAL_SPDLOG )
      find_dependency(spdlog PATHS ${_CONFIG_INSTALL_DIR}/../spdlog NO_DEFAULT_PATH )
    else()
      find_dependency(spdlog)
    endif()
  endif()

  if ( _MANAGE_LIBASSERT )
    if ( _USE_INTERNAL_LIBASSERT )
      find_dependency(libdwarf PATHS ${_CONFIG_INSTALL_DIR}/../libdwarf NO_DEFAULT_PATH )
      find_dependency(cpptrace PATHS ${_CONFIG_INSTALL_DIR}/../cpptrace NO_DEFAULT_PATH )
      find_dependency(libassert PATHS ${_CONFIG_INSTALL_DIR}/../libassert NO_DEFAULT_PATH )
    else()
      find_dependency(libassert)
    endif()
  endif()

  if ( _MANAGE_CPR )
    if ( _USE_INTERNAL_CPR )
      find_dependency(cpr PATHS ${_CONFIG_INSTALL_DIR}/../cpr NO_DEFAULT_PATH )
    else()
      find_dependency(cpr)
    endif()
  endif()

  if ( _MANAGE_EIGEN3 )
    if ( _USE_INTERNAL_EIGEN3 )
      find_dependency(Eigen3 PATHS ${PACKAGE_PREFIX_DIR}/${CMAKE_INSTALL_DATADIR}/eigen3/cmake NO_DEFAULT_PATH )
    else()
      find_dependency(Eigen3)
    endif()
  endif()

  if ( _MANAGE_BVH )
    if ( _USE_INTERNAL_BVH )
      include(${_CONFIG_INSTALL_DIR}/../bvh/bvhTargets.cmake )
    else()
    endif()
  endif()

  if ( _MANAGE_CGAL )
    if ( _USE_INTERNAL_CGAL )
      find_dependency(CGAL COMPONENTS Core PATHS ${_CONFIG_INSTALL_DIR}/../CGAL NO_DEFAULT_PATH )
    else()
      find_dependency(CGAL COMPONENTS Core )
    endif()
    include(CGAL_Eigen3_support)
  endif()


  include(${_CONFIG_INSTALL_DIR}/${_LIBRARY_PREFIX}_third_party_dependencies-targets.cmake)
  include(${_CONFIG_INSTALL_DIR}/${_TARGET_LIBRARY}-targets.cmake)

endmacro(importDependenciesPackageConfigImpl)



macro(importDependenciesPackageConfig _TARGET_LIBRARY _LIBRARY_PREFIX _CONFIG_INSTALL_DIR )
  if ( NOT TARGET Feelpp::${_TARGET_LIBRARY} )
    include(${_CONFIG_INSTALL_DIR}/${_LIBRARY_PREFIX}_third_party_definitions-targets.cmake)
    feelpp_set_options( Feelpp::${_LIBRARY_PREFIX}_third_party_definitions FEELPP "HAS" )
    importDependenciesPackageConfigImpl( ${_TARGET_LIBRARY} ${_LIBRARY_PREFIX} ${_CONFIG_INSTALL_DIR} )
  endif()
endmacro(importDependenciesPackageConfig)
